# .github/workflows/main.yml
name: Task Service CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run tests
        run: |
          pytest tests/ --junitxml=junit/test-results.xml
          
      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: junit/test-results.xml

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
          
      - name: Run linting
        run: |
          flake8 app/ tests/
          black --check app/ tests/

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          
      - name: Run Bandit (Security static code analysis)
        run: |
          bandit -r app/ -f json -o bandit-report.json || true
          
      - name: Run Safety (Check dependencies for vulnerabilities)
        run: |
          safety check --full-report -r requirements.txt || true
          
      - name: Upload security reports
        uses: actions/upload-artifact@v2
        with:
          name: security-reports
          path: bandit-report.json

  build:
    needs: [test, code-quality, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: task-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'task-service:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  k8s-validate:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Validate Kubernetes manifests
        run: |
          kubectl --dry-run=client -f k8s/deployment.yaml
          kubectl --dry-run=client -f k8s/service.yaml
          kubectl --dry-run=client -f k8s/monitoring.yaml
          kubectl --dry-run=client -f k8s/grafana.yaml
          kubectl --dry-run=client -f k8s/persistence/grafana-pv.yaml
          kubectl --dry-run=client -f k8s/network-policy.yaml
          kubectl --dry-run=client -f k8s/task-service-secure.yaml

  # Deploy job commented out as we're using Minikube locally
  # In a real environment, this would push to a registry and deploy
  # deploy:
  #   needs: [build, k8s-validate]
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   steps:
  #     - uses: actions/checkout@v2
  #     
  #     - name: Login to container registry
  #       uses: docker/login-action@v1
  #       with:
  #         registry: your-registry
  #         username: ${{ secrets.REGISTRY_USERNAME }}
  #         password: ${{ secrets.REGISTRY_PASSWORD }}
  #
  #     - name: Push image
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         push: true
  #         tags: your-registry/task-service:latest
